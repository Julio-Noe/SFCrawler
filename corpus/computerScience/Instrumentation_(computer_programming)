In the context of computer programming, instrumentation refers to an ability to monitor or measure the level of a product's performance, to diagnose errors, and to write trace information. Programmers implement instrumentation in the form of code instructions that monitor specific components in a system (for example, instructions may output logging information to appear on the screen). When an application contains instrumentation code, it can be managed by using a management tool. Instrumentation is necessary to review the performance of the application. Instrumentation approaches can be of two types: source instrumentation and binary instrumentation.


== Output ==
In programming, instrumentation means the ability of an application to incorporate:

Code tracing - receiving informative messages about the execution of an application at run time.
Debugging and (structured) exception handling - tracking down and fixing programming errors in an application under development.
Profiling - a means by which dynamic program behaviors can be measured during a training run with a representative input.  This is useful for properties of a program that  cannot be analyzed statically with sufficient precision, such as alias analysis.
Performance counters - components that allow the tracking of the performance of the application.
Computer data logging - components that allow the logging and tracking of major events in the execution of the application.


== Limitations ==
Instrumentation is limited by execution coverage.  If the program never reaches a particular point of execution, then instrumentation at that point collects no data.  For instance, if a word processor application is instrumented, but the user never activates the print feature, then the instrumentation can say nothing about the routines which are used exclusively by the printing feature.
Some types of instrumentation may cause a dramatic increase in execution time.  This may limit the application of instrumentation to debugging contexts.


== See also ==
Hooking - range of techniques used to alter or augment the behavior of an operating system, of applications, or of other software components either by intercepting function calls or messages or events passed between software components
Instruction set simulator - simulation of all instructions at machine code level to provide instrumentation
Runtime intelligence - technologies, managed services and practices for the collection, integration, analysis, and presentation of application usage levels, patterns, and practices
Software performance analysis - techniques to monitor code performance, including instrumentation
Hardware performance counter
DTrace — A comprehensive dynamic tracing framework for troubleshooting kernel and application problems on production systems in real time, implemented in Solaris, macOS, FreeBSD, and many other platforms and products.
Java Management Extensions (JMX) –  Java technology for managing and monitoring applications, system objects, devices (such as printers), and service-oriented networks
Application Response Measurement - standardized instrumentation API for C and Java
Dynamic recompilation - a feature of some emulators and virtual machines where the system may recompile some part of a program during execution


== References ==

Introduction to Instrumentation and Tracing: Microsoft Developer Network
Apple Developer Tools: Introduction to Instruments
SystemTap provides free software (GPL) infrastructure to simplify the gathering of information about the running Linux system.