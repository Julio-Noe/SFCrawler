Shotgun debugging can be defined as:

A process of making relatively un-directed changes to software in the hope that a bug will be perturbed out of existence.
Using the approach of trying several possible solutions of hardware or software problem at the same time, in the hope that one of the solutions (typically source code modifications) will work.Shotgun debugging has a relatively low success rate and can be very time consuming, except when used as an attempt to work around programming language features that one may be using improperly. When combined with domain expertise and a strong intuition for the underlying codebase, it can be a good starting point to gut-solve a buggy piece of code a few times before formally researching the corresponding error message. When used in this way, it may be a valuable technique that is faster than browsing through the Internet searching a particular error message every time. 


== Examples ==
Shotgun debugging can occur when working with multi-threaded applications. Attempting to debug a race condition by adding debugging code to the application is likely to change the speed of one thread in relation to another and could cause the problem to disappear. This is known as a Heisenbug. Although apparently a solution to the problem, it is a fix by pure chance and anything else that changes the behavior of the threads could cause it to resurface â€” for example on a computer with a different scheduler. Code added to any part of the program could easily revert the effect of the "fix".


== See also ==
Fuzzing
Programming by permutation


== References ==

This article is based in part on the Jargon File, which is in the public domain.