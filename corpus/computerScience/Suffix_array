In computer science, a suffix array is a sorted array of all suffixes of a string. It is a data structure used, among others, in full text indices, data compression algorithms and within the field of bibliometrics.
Suffix arrays were introduced by Manber & Myers (1990) as a simple, space efficient alternative to suffix trees. They had independently been discovered by Gaston Gonnet in 1987 under the name PAT array (Gonnet, Baeza-Yates & Snider 1992).
Li, Li & Huo (2016) gave the first in-place 
  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
   time suffix array construction algorithm that is optimal both in time and space, where in-place means that the algorithm only needs 
  
    
      
        
          
            O
          
        
        (
        1
        )
      
    
    {\displaystyle {\mathcal {O}}(1)}
   additional space beyond the input string and the output suffix array.
Enhanced suffix arrays (ESAs) are suffix arrays with additional tables that reproduce the full functionality of suffix trees preserving the same time and memory complexity.
The suffix array for a subset of all suffixes of a string is called sparse suffix array. Multiple probabilistic algorithms have been developed to minimize the additional memory usage including an optimal time and memory algorithm.


== Definition ==
Let 
  
    
      
        S
        =
        S
        [
        1
        ]
        S
        [
        2
        ]
        .
        .
        .
        S
        [
        n
        ]
      
    
    {\displaystyle S=S[1]S[2]...S[n]}
   be a string and let 
  
    
      
        S
        [
        i
        ,
        j
        ]
      
    
    {\displaystyle S[i,j]}
   denote the substring of 
  
    
      
        S
      
    
    {\displaystyle S}
   ranging from 
  
    
      
        i
      
    
    {\displaystyle i}
   to 
  
    
      
        j
      
    
    {\displaystyle j}
  .
The suffix array 
  
    
      
        A
      
    
    {\displaystyle A}
   of 
  
    
      
        S
      
    
    {\displaystyle S}
   is now defined to be an array of integers providing the starting positions of suffixes of 
  
    
      
        S
      
    
    {\displaystyle S}
   in lexicographical order. This means, an entry 
  
    
      
        A
        [
        i
        ]
      
    
    {\displaystyle A[i]}
   contains the starting position of the 
  
    
      
        i
      
    
    {\displaystyle i}
  -th smallest suffix in 
  
    
      
        S
      
    
    {\displaystyle S}
   and thus for all 
  
    
      
        1
        <
        i
        ≤
        n
      
    
    {\displaystyle 1<i\leq n}
  : 
  
    
      
        S
        [
        A
        [
        i
        −
        1
        ]
        ,
        n
        ]
        <
        S
        [
        A
        [
        i
        ]
        ,
        n
        ]
      
    
    {\displaystyle S[A[i-1],n]<S[A[i],n]}
  .
Each suffix of 
  
    
      
        S
      
    
    {\displaystyle S}
   shows up in 
  
    
      
        A
      
    
    {\displaystyle A}
   exactly once. Note suffixes are simple strings. These strings are sorted (as in a paper dictionary), before their starting positions (integer indices) are saved in 
  
    
      
        A
      
    
    {\displaystyle A}
  .


== Example ==
Consider the text 
  
    
      
        S
      
    
    {\displaystyle S}
  =banana$ to be indexed:

The text ends with the special sentinel letter $ that is unique and lexicographically smaller than any other character. The text has the following suffixes:

These suffixes can be sorted in ascending order:

The suffix array 
  
    
      
        A
      
    
    {\displaystyle A}
   contains the starting positions of these sorted suffixes:

The suffix array with the suffixes written out vertically underneath for clarity:

So for example, 
  
    
      
        A
        [
        3
        ]
      
    
    {\displaystyle A[3]}
   contains the value 4, and therefore refers to the suffix starting at position 4 within 
  
    
      
        S
      
    
    {\displaystyle S}
  , which is the suffix ana$.


== Correspondence to suffix trees ==
Suffix arrays are closely related to suffix trees:

Suffix arrays can be constructed by performing a depth-first traversal of a suffix tree. The suffix array corresponds to the leaf-labels given in the order in which these are visited during the traversal, if edges are visited in the lexicographical order of their first character.
A suffix tree can be constructed in linear time by using a combination of suffix array and LCP array. For a description of the algorithm, see the corresponding section in the LCP array article.It has been shown that every suffix tree algorithm can be systematically replaced with an algorithm that uses a suffix array enhanced with additional information (such as the LCP array) and solves the same problem in the same time complexity.
Advantages of suffix arrays over suffix trees include improved space requirements, simpler linear time construction algorithms (e.g., compared to Ukkonen's algorithm) and improved cache locality.


== Space Efficiency ==
Suffix arrays were introduced by Manber & Myers (1990) in order to improve over the space requirements of suffix trees: Suffix arrays store 
  
    
      
        n
      
    
    {\displaystyle n}
   integers. Assuming an integer requires 
  
    
      
        4
      
    
    {\displaystyle 4}
   bytes, a suffix array requires 
  
    
      
        4
        n
      
    
    {\displaystyle 4n}
   bytes in total. This is significantly less than the 
  
    
      
        20
        n
      
    
    {\displaystyle 20n}
   bytes which are required by a careful suffix tree implementation.However, in certain applications, the space requirements of suffix arrays may still be prohibitive. Analyzed in bits, a suffix array requires 
  
    
      
        
          
            O
          
        
        (
        n
        log
        ⁡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n\log n)}
   space, whereas the original text over an alphabet of size 
  
    
      
        σ
      
    
    {\displaystyle \sigma }
   only requires 
  
    
      
        
          
            O
          
        
        (
        n
        log
        ⁡
        σ
        )
      
    
    {\displaystyle {\mathcal {O}}(n\log \sigma )}
   bits.
For a human genome with 
  
    
      
        σ
        =
        4
      
    
    {\displaystyle \sigma =4}
   and 
  
    
      
        n
        =
        3.4
        ×
        
          10
          
            9
          
        
      
    
    {\displaystyle n=3.4\times 10^{9}}
   the suffix array would therefore occupy about 16 times more memory than the genome itself.
Such discrepancies motivated a trend towards compressed suffix arrays and BWT-based compressed full-text indices such as the FM-index. These data structures require only space within the size of the text or even less.


== Construction Algorithms ==
A suffix tree can be built in 
  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
   and can be converted into a suffix array by traversing the tree depth-first also in 
  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  , so there exist algorithms that can build a suffix array in 
  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  .
A naive approach to construct a suffix array is to use a comparison-based sorting algorithm. These algorithms require 
  
    
      
        
          
            O
          
        
        (
        n
        log
        ⁡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n\log n)}
   suffix comparisons, but a suffix comparison runs in 
  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
   time, so the overall runtime of this approach is 
  
    
      
        
          
            O
          
        
        (
        
          n
          
            2
          
        
        log
        ⁡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n^{2}\log n)}
  .
More advanced algorithms take advantage of the fact that the suffixes to be sorted are not arbitrary strings but related to each other. These algorithms strive to achieve the following goals:
minimal asymptotic complexity 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
  
lightweight in space, meaning little or no working memory beside the text and the suffix array itself is needed
fast in practiceOne of the first algorithms to achieve all goals is the SA-IS algorithm of Nong, Zhang & Chan (2009). The algorithm is also rather simple (< 100 LOC) and can be enhanced to simultaneously construct the LCP array. The SA-IS algorithm is one of the fastest known suffix array construction algorithms. A careful implementation by Yuta Mori outperforms most other linear or super-linear construction approaches.
Beside time and space requirements, suffix array construction algorithms are also differentiated by their supported alphabet:  constant alphabets where the alphabet size is bound by a constant, integer alphabets where characters are integers in a range depending on 
  
    
      
        n
      
    
    {\displaystyle n}
   and general alphabets where only character comparisons are allowed.Most suffix array construction algorithms are based on one of the following approaches:
Prefix doubling algorithms are based on a strategy of Karp, Miller & Rosenberg (1972). The idea is to find prefixes that honor the lexicographic ordering of suffixes. The assessed prefix length doubles in each iteration of the algorithm until a prefix is unique and provides the rank of the associated suffix.
Recursive algorithms follow the approach of the suffix tree construction algorithm by Farach (1997) to recursively sort a subset of suffixes. This subset is then used to infer a suffix array of the remaining suffixes. Both of these suffix arrays are then merged to compute the final suffix array.
Induced copying algorithms are similar to recursive algorithms in the sense that they use an already sorted subset to induce a fast sort of the remaining suffixes. The difference is that these algorithms favor iteration over recursion to sort the selected suffix subset. A survey of this diverse group of algorithms has been put together by Puglisi, Smyth & Turpin (2007).A well-known recursive algorithm for integer alphabets is the DC3 / skew algorithm of Kärkkäinen & Sanders (2003). It runs in linear time and has successfully been used as the basis for parallel and external memory suffix array construction algorithms.
Recent work by Salson et al. (2010) proposes an algorithm for updating the suffix array of a text that has been edited instead of rebuilding a new suffix array from scratch. Even if the theoretical worst-case time complexity is 
  
    
      
        
          
            O
          
        
        (
        n
        log
        ⁡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n\log n)}
  , it appears to perform well in practice: experimental results from the authors showed that their implementation of dynamic suffix arrays is generally more efficient than rebuilding when considering the insertion of a reasonable number of letters in the original text.


== Applications ==
The suffix array of a string can be used as an index to quickly locate every occurrence of a substring pattern 
  
    
      
        P
      
    
    {\displaystyle P}
   within the string 
  
    
      
        S
      
    
    {\displaystyle S}
  . Finding every occurrence of the pattern is equivalent to finding every suffix that begins with the substring. Thanks to the lexicographical ordering, these suffixes will be grouped together in the suffix array and can be found efficiently with two binary searches. The first search locates the starting position of the interval, and the second one determines the end position:

Finding the substring pattern 
  
    
      
        P
      
    
    {\displaystyle P}
   of length 
  
    
      
        m
      
    
    {\displaystyle m}
   in the string 
  
    
      
        S
      
    
    {\displaystyle S}
   of length 
  
    
      
        n
      
    
    {\displaystyle n}
   takes 
  
    
      
        
          
            O
          
        
        (
        m
        log
        ⁡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(m\log n)}
   time, given that a single suffix comparison needs to compare 
  
    
      
        m
      
    
    {\displaystyle m}
   characters. Manber & Myers (1990) describe how this bound can be improved to 
  
    
      
        
          
            O
          
        
        (
        m
        +
        log
        ⁡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(m+\log n)}
   time using LCP information. The idea is that a pattern comparison does not need to re-compare certain characters, when it is already known that these are part of the longest common prefix of the pattern and the current search interval.  Abouelhoda, Kurtz & Ohlebusch (2004) improve the bound even further and achieve a search time of 
  
    
      
        
          
            O
          
        
        (
        m
        )
      
    
    {\displaystyle {\mathcal {O}}(m)}
   as known from suffix trees.
Suffix sorting algorithms can be used to compute the Burrows–Wheeler transform (BWT). The BWT requires sorting of all cyclic permutations of a string. If this string ends in a special end-of-string character that is lexicographically smaller than all other character (i.e., $), then the order of the sorted rotated BWT matrix corresponds to the order of suffixes in a suffix array. The BWT can therefore be computed in linear time by first constructing a suffix array of the text and then deducing the BWT string: 
  
    
      
        B
        W
        T
        [
        i
        ]
        =
        S
        [
        A
        [
        i
        ]
        −
        1
        ]
      
    
    {\displaystyle BWT[i]=S[A[i]-1]}
  .
Suffix arrays can also be used to look up substrings in Example-Based Machine Translation, demanding much less storage than a full phrase table as used in Statistical machine translation.
Many additional applications of the suffix array require the LCP array. Some of these are detailed in the application section of the latter.


== Notes ==


== References ==
Manber, Udi; Myers, Gene (1990). Suffix arrays: a new method for on-line string searches. First Annual ACM-SIAM Symposium on Discrete Algorithms. pp. 319–327.
Manber, Udi; Myers, Gene (1993). "Suffix arrays: a new method for on-line string searches". SIAM Journal on Computing. 22: 935–948. doi:10.1137/0222058.
Li, Zhize; Li, Jian; Huo, Hongwei (2016). Optimal In-Place Suffix Sorting. Proceedings of the 25th International Symposium on String Processing and Information Retrieval (SPIRE). Lecture Notes in Computer Science. 11147. Springer. pp. 268–284. arXiv:1610.08305. doi:10.1007/978-3-030-00479-8_22. ISBN 978-3-030-00478-1.
Abouelhoda, Mohamed Ibrahim; Kurtz, Stefan; Ohlebusch, Enno (2004). "Replacing suffix trees with enhanced suffix arrays". Journal of Discrete Algorithms. 2 (1): 53–86. doi:10.1016/S1570-8667(03)00065-0.
Gonnet, G.H; Baeza-Yates, R.A; Snider, T (1992). "New indices for text: PAT trees and PAT arrays". Information retrieval: data structures and algorithms.
Kurtz, S (1999). "Reducing the space requirement of suffix trees". Software-Practice and Experience. 29 (13): 1149. doi:10.1002/(SICI)1097-024X(199911)29:13<1149::AID-SPE274>3.0.CO;2-O.
Abouelhoda, Mohamed Ibrahim; Kurtz, Stefan; Ohlebusch, Enno (2002). The Enhanced Suffix Array and Its Applications to Genome Analysis. Algorithms in Bioinformatics. Lecture Notes in Computer Science. 2452. p. 449. doi:10.1007/3-540-45784-4_35. ISBN 978-3-540-44211-0.
Puglisi, Simon J.; Smyth, W. F.; Turpin, Andrew H. (2007). "A taxonomy of suffix array construction algorithms". ACM Computing Surveys. 39 (2): 4. doi:10.1145/1242471.1242472.
Nong, Ge; Zhang, Sen; Chan, Wai Hong (2009). Linear Suffix Array Construction by Almost Pure Induced-Sorting. 2009 Data Compression Conference. p. 193. doi:10.1109/DCC.2009.42. ISBN 978-0-7695-3592-0.
Fischer, Johannes (2011). Inducing the LCP-Array. Algorithms and Data Structures. Lecture Notes in Computer Science. 6844. p. 374. arXiv:1101.3448. doi:10.1007/978-3-642-22300-6_32. ISBN 978-3-642-22299-3.
Salson, M.; Lecroq, T.; Léonard, M.; Mouchard, L. (2010). "Dynamic extended suffix arrays". Journal of Discrete Algorithms. 8 (2): 241. doi:10.1016/j.jda.2009.02.007.
Burkhardt, Stefan; Kärkkäinen, Juha (2003). Fast Lightweight Suffix Array Construction and Checking. Combinatorial Pattern Matching. Lecture Notes in Computer Science. 2676. p. 55. doi:10.1007/3-540-44888-8_5. ISBN 978-3-540-40311-1.
Karp, Richard M.; Miller, Raymond E.; Rosenberg, Arnold L. (1972). Rapid identification of repeated patterns in strings, trees and arrays. Proceedings of the fourth annual ACM symposium on Theory of computing  - STOC '72. p. 125. doi:10.1145/800152.804905.
Farach, M. (1997). Optimal suffix tree construction with large alphabets. Proceedings 38th Annual Symposium on Foundations of Computer Science. p. 137. doi:10.1109/SFCS.1997.646102. ISBN 0-8186-8197-7.
Kärkkäinen, Juha; Sanders, Peter (2003). Simple Linear Work Suffix Array Construction. Automata, Languages and Programming. Lecture Notes in Computer Science. 2719. p. 943. doi:10.1007/3-540-45061-0_73. ISBN 978-3-540-40493-4.
Dementiev, Roman; Kärkkäinen, Juha; Mehnert, Jens; Sanders, Peter (2008). "Better external memory suffix array construction". Journal of Experimental Algorithmics. 12: 1. doi:10.1145/1227161.1402296.
Kulla, Fabian; Sanders, Peter (2007). "Scalable parallel suffix array construction". Parallel Computing. 33 (9): 605. doi:10.1016/j.parco.2007.06.004.


== External links ==
Suffix Array in Java
Suffix sorting module for BWT in C code
Suffix Array Implementation in Ruby
Suffix array library and tools
Project containing various Suffix Array c/c++ Implementations with a unified interface
A fast, lightweight, and robust C API library to construct the suffix array
Suffix Array implementation in Python
Linear Time Suffix Array implementation in C using suffix tree