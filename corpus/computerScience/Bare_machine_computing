Bare Machine Computing (BMC) is a programming paradigm based on bare machines. In the BMC paradigm, applications run without the support of any operating system (OS) or centralized kernel i.e., no intermediary software is loaded on the bare machine prior to running applications. The applications, which are called bare machine applications or simply BMC applications, do not use any persistent storage or a hard disk, and instead are stored on detachable mass storage such as a USB flash drive. A BMC program consists of a single application or a small set of applications (application suite) that runs as a single executable within one address space. BMC applications have direct access to the necessary hardware resources. They are self-contained, self-managed and self-controlled entities that boot, load and run without using any other software components or external software. BMC applications have inherent security due to their design. There are no OS-related vulnerabilities, and each application only contains the necessary (minimal) functionality. There is no privileged mode in a BMC system since applications only run in user mode. Also, application code is statically compiled-there is no means to dynamically alter BMC program flow during execution.


== History ==
In the early days of computing, computer applications directly communicated to the hardware. As applications grew larger encompassing various domains, OSes were invented. They served as middleware providing hardware abstractions to applications. OSes have grown immensely in their size and complexity resulting in attempts to reduce OS overhead and improve performance including   Microkernel, Exokernel , Tiny-OS, OS-Kit, Palacio and Kitten ,IO_Lite, bare-metal Linux, IBM-Libra and other lean kernels. In addition to the above approaches, in embedded systems such as smart phones, a small and dedicated portion of an OS and a given set of applications are closely integrated with the hardware. There are also a myriad of industrial control and gaming applications that run directly on the hardware. In most of these systems, the hardware is not open to run general purpose applications. 
Bare machine computing originated with application object (AO) concept invented by Karne at Towson University. It evolved over the years into dispersed operating systems (DOSC), and  eventually into the BMC paradigm.


== Compared to conventional computing ==
In many ways, the BMC paradigm differs from conventional computing. There is no centralized kernel or OS running during the execution of BMC applications. Also, a bare machine in the BMC paradigm does not have any ownership or store valuable resources; and it can be used to run general purpose computing applications. Such characteristics are not found in conventional computing systems including embedded systems and    system on a chip (SOC). In addition, the BMC concept is a minimalistic approach to achieve simplicity, smaller code sizes and security.


== Applications and research ==
The BMC paradigm has been used to implement webservers, split servers, VoIP, SIP server, email, webmail, Text Based Browser, security protocols, file systems, RAID,,transformed bare SQLite., middleware for network cards interfaces(NICS),and ethernet BONDING on BMC webserver with dual NICs, Success in transforming conventional Windows or Linux applications to run as BMC applications will pave the way for new uses of the BMC paradigm.


== References ==