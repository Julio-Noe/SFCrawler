In computing, a device tree (also written devicetree) is a data structure describing the hardware components of a particular computer so that the operating system's kernel can use and manage those components, including the CPU or CPUs, the memory, the buses and the peripherals.
The device tree was derived from SPARC-based workstations and servers via the Open Firmware project. The current Devicetree specification
is targeted at smaller systems, but is still used with some server-class systems (for instance, those described by the Power Architecture Platform Reference).
Personal computers with the x86 architecture generally do not use device trees, relying instead on various auto configuration protocols to discover hardware. Systems which use device trees usually pass a static device tree (perhaps stored in ROM) to the operating system, but can also generate a device tree in the early stages of booting. As an example, Das U-Boot and kexec can pass a device tree when launching a new operating system. On systems with a boot loader that does not support device trees, a static device tree may be installed along with the operating system; the Linux kernel supports this approach.
The Devicetree specification is currently managed by a community named devicetree.org, which is associated with, among others, Linaro and Arm.


== Device Tree formats ==
A device tree can hold any kind of data as internally it is a tree of named nodes and properties.  Nodes contain properties and child nodes, while properties are name–value pairs.
Device trees have both a binary format for operating systems to use and a textual format for convenient editing and management.


== Usage in Linux ==
Given the correct device tree, the same compiled kernel can support different hardware configurations within a wider architecture family. The Linux kernel for the Arm, x86, MicroBlaze, PowerPC, and SPARC architectures reads device tree information; on Arm, device trees have been mandatory for all new SoCs since 2012. This can be seen as a remedy to the vast number of forks (of Linux and Das U-boot) that has historically been created to support (marginally) different Arm boards. The purpose is to move a significant part of the hardware description out of the kernel binary, and into the compiled device tree blob, which is handed to the kernel by the boot loader, replacing a range of board-specific C source files and compile-time options in the kernel.It has been customary for Arm-based Linux distributions to include a boot loader, that necessarily was customised for specific boards, for example Raspberry Pi or Hackberry A10. This has created problems for the creators of Linux distributions as some part of the operating system must be compiled specifically for every board variant, or updated to support new boards. However, some modern SoCs (for example, Freescale i.MX6) have a vendor-provided boot loader with device tree on a separate chip from the operating system.A proprietary configuration file format used for similar purposes, the FEX file format, is a de facto standard among Allwinner SoCs.


== See also ==
Differentiated System Description Table –  part of ACPI firmware that describes power events to an OS.
PCI configuration space  –  how one bus found in most PCs is auto configured.


== References ==


== External links ==
devicetree.org website
Device Tree Reference –  eLinux.org
Device Tree –  OMAPpedia
Embedded Power Architecture Platform Requirements (ePAPR)
About The Device Tree