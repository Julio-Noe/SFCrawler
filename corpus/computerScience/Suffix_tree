In computer science, a suffix tree (also called PAT tree or, in an earlier form, position tree) is a compressed trie containing all the suffixes of the given text as their keys and positions in the text as their values. Suffix trees allow particularly fast implementations of many important string operations.
The construction of such a tree for the string 
  
    
      
        S
      
    
    {\displaystyle S}
   takes time and space linear in the length of 
  
    
      
        S
      
    
    {\displaystyle S}
  . Once constructed, several operations can be performed quickly, for instance locating a substring in 
  
    
      
        S
      
    
    {\displaystyle S}
  , locating a substring if a certain number of mistakes are allowed, locating matches for a regular expression pattern etc. Suffix trees also provide one of the first linear-time solutions for the longest common substring problem. These speedups come at a cost: storing a string's suffix tree typically requires significantly more space than storing the string itself.


== History ==
The concept was first introduced by Weiner (1973), which Donald Knuth subsequently characterized as "Algorithm of the Year 1973".  The construction was greatly simplified by McCreight (1976)
, and also by Ukkonen (1995).  Ukkonen provided the first online-construction of suffix trees, now known as Ukkonen's algorithm, with running time that matched the then fastest algorithms.
These algorithms are all linear-time for a constant-size alphabet, and have worst-case running time of 
  
    
      
        O
        (
        n
        log
        ⁡
        n
        )
      
    
    {\displaystyle O(n\log n)}
   in general.
Farach (1997) gave the first suffix tree construction algorithm that is optimal for all alphabets.  In particular, this is the first linear-time algorithm 
for strings drawn from an alphabet of integers in a polynomial range.  Farach's algorithm has become the basis for new algorithms for constructing both suffix trees and suffix arrays, for example, in external memory, compressed, succinct, etc.


== Definition ==
The suffix tree for the string 
  
    
      
        S
      
    
    {\displaystyle S}
   of length 
  
    
      
        n
      
    
    {\displaystyle n}
   is defined as a tree such that:
The tree has exactly n leaves numbered from 1 to n.
Except for the root, every internal node has at least two children.
Each edge is labelled with a non-empty substring of S.
No two edges starting out of a node can have string-labels beginning with the same character.
The string obtained by concatenating all the string-labels found on the path from the root to leaf i spells out suffix S[i..n], for i from 1 to n.Since such a tree does not exist for all strings, 
  
    
      
        S
      
    
    {\displaystyle S}
   is padded with a terminal symbol not seen in the string (usually denoted $). This ensures that no suffix is a prefix of another, and that there will be 
  
    
      
        n
      
    
    {\displaystyle n}
   leaf nodes, one for each of the 
  
    
      
        n
      
    
    {\displaystyle n}
   suffixes of 
  
    
      
        S
      
    
    {\displaystyle S}
  . Since all internal non-root nodes are branching, there can be at most n −  1 such nodes, and n + (n − 1) + 1 = 2n nodes in total (n leaves, n − 1 internal non-root nodes, 1 root).
Suffix links are a key feature for older linear-time construction algorithms, although most newer algorithms, which are based on Farach's algorithm, dispense with suffix links. In a complete suffix tree, all internal non-root nodes have a suffix link to another internal node. If the path from the root to a node spells the string 
  
    
      
        χ
        α
      
    
    {\displaystyle \chi \alpha }
  , where 
  
    
      
        χ
      
    
    {\displaystyle \chi }
   is a single character and 
  
    
      
        α
      
    
    {\displaystyle \alpha }
   is a string (possibly empty), it has a suffix link to the internal node representing 
  
    
      
        α
      
    
    {\displaystyle \alpha }
  . See for example the suffix link from the node for ANA to the node for NA in the figure above. Suffix links are also used in some algorithms running on the tree.


== Generalized suffix tree ==
A generalized suffix tree is a suffix tree made for a set of words instead of a single word. It represents all suffixes from this set of words. Each word must be terminated by a different termination symbol or word.


== Functionality ==
A suffix tree for a string 
  
    
      
        S
      
    
    {\displaystyle S}
   of length 
  
    
      
        n
      
    
    {\displaystyle n}
   can be built in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   time, if the letters come from an alphabet of integers in a polynomial range (in particular, this is true for constant-sized alphabets).
For larger alphabets, the running time is dominated by first sorting the letters to bring them into a range of size 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  ; in general, this takes 
  
    
      
        O
        (
        n
        log
        ⁡
        n
        )
      
    
    {\displaystyle O(n\log n)}
   time.
The costs below are given under the assumption that the alphabet is constant.
Assume that a suffix tree has been built for the string 
  
    
      
        S
      
    
    {\displaystyle S}
   of length 
  
    
      
        n
      
    
    {\displaystyle n}
  , or that a generalised suffix tree has been built for the set of strings 
  
    
      
        D
        =
        {
        
          S
          
            1
          
        
        ,
        
          S
          
            2
          
        
        ,
        …
        ,
        
          S
          
            K
          
        
        }
      
    
    {\displaystyle D=\{S_{1},S_{2},\dots ,S_{K}\}}
   of total length 
  
    
      
        n
        =
        
          n
          
            1
          
        
        +
        
          n
          
            2
          
        
        +
        ⋯
        +
        
          n
          
            K
          
        
      
    
    {\displaystyle n=n_{1}+n_{2}+\cdots +n_{K}}
  .
You can:

Search for strings:
Check if a string 
  
    
      
        P
      
    
    {\displaystyle P}
   of length 
  
    
      
        m
      
    
    {\displaystyle m}
   is a substring in 
  
    
      
        O
        (
        m
        )
      
    
    {\displaystyle O(m)}
   time.
Find the first occurrence of the patterns 
  
    
      
        
          P
          
            1
          
        
        ,
        …
        ,
        
          P
          
            q
          
        
      
    
    {\displaystyle P_{1},\dots ,P_{q}}
   of total length 
  
    
      
        m
      
    
    {\displaystyle m}
   as substrings in 
  
    
      
        O
        (
        m
        )
      
    
    {\displaystyle O(m)}
   time.
Find all 
  
    
      
        z
      
    
    {\displaystyle z}
   occurrences of the patterns 
  
    
      
        
          P
          
            1
          
        
        ,
        …
        ,
        
          P
          
            q
          
        
      
    
    {\displaystyle P_{1},\dots ,P_{q}}
   of total length 
  
    
      
        m
      
    
    {\displaystyle m}
   as substrings in 
  
    
      
        O
        (
        m
        +
        z
        )
      
    
    {\displaystyle O(m+z)}
   time.
Search for a regular expression P in time expected sublinear in 
  
    
      
        n
      
    
    {\displaystyle n}
  .
Find for each suffix of a pattern 
  
    
      
        P
      
    
    {\displaystyle P}
  , the length of the longest match between a prefix of 
  
    
      
        P
        [
        i
        …
        m
        ]
      
    
    {\displaystyle P[i\dots m]}
   and a substring in 
  
    
      
        D
      
    
    {\displaystyle D}
   in 
  
    
      
        Θ
        (
        m
        )
      
    
    {\displaystyle \Theta (m)}
   time. This is termed the matching statistics for 
  
    
      
        P
      
    
    {\displaystyle P}
  .
Find properties of the strings:
Find the longest common substrings of the string 
  
    
      
        
          S
          
            i
          
        
      
    
    {\displaystyle S_{i}}
   and 
  
    
      
        
          S
          
            j
          
        
      
    
    {\displaystyle S_{j}}
   in 
  
    
      
        Θ
        (
        
          n
          
            i
          
        
        +
        
          n
          
            j
          
        
        )
      
    
    {\displaystyle \Theta (n_{i}+n_{j})}
   time.
Find all maximal pairs, maximal repeats or supermaximal repeats in 
  
    
      
        Θ
        (
        n
        +
        z
        )
      
    
    {\displaystyle \Theta (n+z)}
   time.
Find the Lempel–Ziv decomposition in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   time.
Find the longest repeated substrings in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   time.
Find the most frequently occurring substrings of a minimum length in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   time.
Find the shortest strings from 
  
    
      
        Σ
      
    
    {\displaystyle \Sigma }
   that do not occur in 
  
    
      
        D
      
    
    {\displaystyle D}
  , in 
  
    
      
        O
        (
        n
        +
        z
        )
      
    
    {\displaystyle O(n+z)}
   time, if there are 
  
    
      
        z
      
    
    {\displaystyle z}
   such strings.
Find the shortest substrings occurring only once in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   time.
Find, for each 
  
    
      
        i
      
    
    {\displaystyle i}
  , the shortest substrings of 
  
    
      
        
          S
          
            i
          
        
      
    
    {\displaystyle S_{i}}
   not occurring elsewhere in 
  
    
      
        D
      
    
    {\displaystyle D}
   in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   time.The suffix tree can be prepared for constant time lowest common ancestor retrieval between nodes in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   time. One can then also:

Find the longest common prefix between the suffixes 
  
    
      
        
          S
          
            i
          
        
        [
        p
        .
        .
        
          n
          
            i
          
        
        ]
      
    
    {\displaystyle S_{i}[p..n_{i}]}
   and 
  
    
      
        
          S
          
            j
          
        
        [
        q
        .
        .
        
          n
          
            j
          
        
        ]
      
    
    {\displaystyle S_{j}[q..n_{j}]}
   in 
  
    
      
        Θ
        (
        1
        )
      
    
    {\displaystyle \Theta (1)}
  .
Search for a pattern P of length m with at most k mismatches in 
  
    
      
        O
        (
        k
        n
        +
        z
        )
      
    
    {\displaystyle O(kn+z)}
   time, where z is the number of hits.
Find all 
  
    
      
        z
      
    
    {\displaystyle z}
   maximal palindromes in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
  , or 
  
    
      
        Θ
        (
        g
        n
        )
      
    
    {\displaystyle \Theta (gn)}
   time if gaps of length 
  
    
      
        g
      
    
    {\displaystyle g}
   are allowed, or 
  
    
      
        Θ
        (
        k
        n
        )
      
    
    {\displaystyle \Theta (kn)}
   if 
  
    
      
        k
      
    
    {\displaystyle k}
   mismatches are allowed.
Find all 
  
    
      
        z
      
    
    {\displaystyle z}
   tandem repeats in 
  
    
      
        O
        (
        n
        log
        ⁡
        n
        +
        z
        )
      
    
    {\displaystyle O(n\log n+z)}
  , and k-mismatch tandem repeats in 
  
    
      
        O
        (
        k
        n
        log
        ⁡
        (
        n
        
          /
        
        k
        )
        +
        z
        )
      
    
    {\displaystyle O(kn\log(n/k)+z)}
  .
Find the longest common substrings to at least 
  
    
      
        k
      
    
    {\displaystyle k}
   strings in 
  
    
      
        D
      
    
    {\displaystyle D}
   for 
  
    
      
        k
        =
        2
        ,
        …
        ,
        K
      
    
    {\displaystyle k=2,\dots ,K}
   in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   time.
Find the longest palindromic substring of a given string (using the generalized suffix tree of the string and its reverse) in linear time.


== Applications ==
Suffix trees can be used to solve a large number of string problems that occur in text-editing, free-text search, computational biology and other application areas. Primary applications include:
String search, in O(m) complexity, where m is the length of the sub-string (but with initial O(n) time required to build the suffix tree for the string)
Finding the longest repeated substring
Finding the longest common substring
Finding the longest palindrome in a stringSuffix trees are often used in bioinformatics applications, searching for patterns in DNA or protein sequences (which can be viewed as long strings of characters). The ability to search efficiently with mismatches might be considered their greatest strength. Suffix trees are also used in data compression; they can be used to find repeated data, and can be used for the sorting stage of the Burrows–Wheeler transform. Variants of the LZW compression schemes use suffix trees (LZSS). A suffix tree is also used in suffix tree clustering, a data clustering algorithm used in some search engines.


== Implementation ==
If each node and edge can be represented in 
  
    
      
        Θ
        (
        1
        )
      
    
    {\displaystyle \Theta (1)}
   space, the entire tree can be represented in 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   space. The total length of all the strings on all of the edges in the tree is 
  
    
      
        O
        (
        
          n
          
            2
          
        
        )
      
    
    {\displaystyle O(n^{2})}
  , but each edge can be stored as the position and length of a substring of S, giving a total space usage of 
  
    
      
        Θ
        (
        n
        )
      
    
    {\displaystyle \Theta (n)}
   computer words. The worst-case space usage of a suffix tree is seen with a fibonacci word, giving the full 
  
    
      
        2
        n
      
    
    {\displaystyle 2n}
   nodes.
An important choice when making a suffix tree implementation is the parent-child relationships between nodes. The most common is using linked lists called sibling lists. Each node has a pointer to its first child, and to the next node in the child list it is a part of. Other implementations with efficient running time properties use hash maps, sorted or unsorted arrays (with array doubling), or balanced search trees. We are interested in:

The cost of finding the child on a given character.
The cost of inserting a child.
The cost of enlisting all children of a node (divided by the number of children in the table below).Let σ be the size of the alphabet. Then you have the following costs:

  
    
      
        
          
            
              
              
                
                  Lookup
                
              
              
                
                  Insertion
                
              
              
                
                  Traversal
                
              
            
            
              
                
                  Sibling lists / unsorted arrays
                
              
              
                O
                (
                σ
                )
              
              
                Θ
                (
                1
                )
              
              
                Θ
                (
                1
                )
              
            
            
              
                
                  Bitwise sibling trees
                
              
              
                O
                (
                log
                ⁡
                σ
                )
              
              
                Θ
                (
                1
                )
              
              
                Θ
                (
                1
                )
              
            
            
              
                
                  Hash maps
                
              
              
                Θ
                (
                1
                )
              
              
                Θ
                (
                1
                )
              
              
                O
                (
                σ
                )
              
            
            
              
                
                  Balanced search tree
                
              
              
                O
                (
                log
                ⁡
                σ
                )
              
              
                O
                (
                log
                ⁡
                σ
                )
              
              
                O
                (
                1
                )
              
            
            
              
                
                  Sorted arrays
                
              
              
                O
                (
                log
                ⁡
                σ
                )
              
              
                O
                (
                σ
                )
              
              
                O
                (
                1
                )
              
            
            
              
                
                  Hash maps + sibling lists
                
              
              
                O
                (
                1
                )
              
              
                O
                (
                1
                )
              
              
                O
                (
                1
                )
              
            
          
        
      
    
    {\displaystyle {\begin{array}{r|lll}&{\text{Lookup}}&{\text{Insertion}}&{\text{Traversal}}\\\hline {\text{Sibling lists / unsorted arrays}}&O(\sigma )&\Theta (1)&\Theta (1)\\{\text{Bitwise sibling trees}}&O(\log \sigma )&\Theta (1)&\Theta (1)\\{\text{Hash maps}}&\Theta (1)&\Theta (1)&O(\sigma )\\{\text{Balanced search tree}}&O(\log \sigma )&O(\log \sigma )&O(1)\\{\text{Sorted arrays}}&O(\log \sigma )&O(\sigma )&O(1)\\{\text{Hash maps + sibling lists}}&O(1)&O(1)&O(1)\end{array}}}
  The insertion cost is amortised, and that the costs for hashing are given for perfect hashing.
The large amount of information in each edge and node makes the suffix tree very expensive, consuming about 10 to 20 times the memory size of the source text in good implementations. The suffix array reduces this requirement to a factor of 8 (for array including LCP values built within 32-bit address space and 8-bit characters.) This factor depends on the properties and may reach 2 with usage of 4-byte wide characters (needed to contain any symbol in some UNIX-like systems, see wchar_t) on 32-bit systems. Researchers have continued to find smaller indexing structures.


== Parallel construction ==
Various parallel algorithms to speed up suffix tree construction have been proposed.
Recently, a practical parallel algorithm for suffix tree construction with 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
   work (sequential time) and 
  
    
      
        O
        (
        
          log
          
            2
          
        
        ⁡
        n
        )
      
    
    {\displaystyle O(\log ^{2}n)}
   span has been developed. The algorithm achieves good parallel scalability on shared-memory multicore machines and can index the 3GB human genome in under 3 minutes using a 40-core machine.


== External construction ==
Though linear, the memory usage of a suffix tree is significantly higher
than the actual size of the sequence collection.  For a large text,
construction may require external memory approaches.
There are theoretical results for constructing suffix trees in external
memory.
The algorithm by Farach-Colton, Ferragina & Muthukrishnan (2000)
is theoretically optimal, with an I/O complexity equal to that of sorting.
However the overall intricacy of this algorithm has prevented, so far, its
practical implementation.On the other hand, there have been practical works for constructing
disk-based suffix trees
which scale to (few) GB/hours.
The state of the art methods are TDD,
TRELLIS,
DiGeST,
and
B2ST.TDD and TRELLIS scale up to the entire human genome – approximately 3GB – resulting in a disk-based suffix tree of a size in the tens of gigabytes. However, these methods cannot handle efficiently collections of sequences exceeding 3GB.  DiGeST performs significantly better and is able to handle collections of sequences in the order of 6GB in about 6 hours.
.
All these methods can efficiently build suffix trees for the case when the
tree does not fit in main memory,
but the input does.
The most recent method, B2ST, scales to handle
inputs that do not fit in main memory. ERA  is a recent parallel suffix tree construction method that is significantly faster. ERA can index the entire human genome in 19 minutes on an 8-core desktop computer with 16GB RAM. On a simple Linux cluster with 16 nodes (4GB RAM per node), ERA can index the entire human genome in less than 9 minutes.


== See also ==
Suffix array
Suffix automaton
Generalised suffix tree
Trie


== Notes ==


== References ==
Apostolico, A.; Iliopoulos, C.; Landau, G. M.; Schieber, B.; Vishkin, U. (1988), "Parallel construction of a suffix tree with applications", Algorithmica, 3, doi:10.1007/bf01762122.
Baeza-Yates, Ricardo A.; Gonnet, Gaston H. (1996), "Fast text searching for regular expressions or automaton searching on tries", Journal of the ACM, 43 (6): 915–936, doi:10.1145/235809.235810.
Barsky, Marina; Stege, Ulrike; Thomo, Alex; Upton, Chris (2008), "A new method for indexing genomes using on-disk suffix trees", CIKM '08: Proceedings of the 17th ACM Conference on Information and Knowledge Management, New York, NY, USA: ACM, pp. 649–658.
Barsky, Marina; Stege, Ulrike; Thomo, Alex; Upton, Chris (2009), "Suffix trees for very large genomic sequences", CIKM '09: Proceedings of the 18th ACM Conference on Information and Knowledge Management, New York, NY, USA: ACM.
Farach, Martin (1997), "Optimal Suffix Tree Construction with Large Alphabets" (PDF), 38th IEEE Symposium on Foundations of Computer Science (FOCS '97), pp. 137–143.
Farach, Martin; Muthukrishnan, S. (1996), "Optimal Logarithmic Time Randomized Suffix Tree Construction", International Colloquium on Automata Languages and Programming.
Farach-Colton, Martin; Ferragina, Paolo; Muthukrishnan, S. (2000), "On the sorting-complexity of suffix tree construction.", Journal of the ACM, 47 (6): 987–1011, doi:10.1145/355541.355547.
Giegerich, R.; Kurtz, S. (1997), "From Ukkonen to McCreight and Weiner: A Unifying View of Linear-Time Suffix Tree Construction" (PDF), Algorithmica, 19 (3): 331–353, doi:10.1007/PL00009177, archived from the original (PDF) on 2016-03-03, retrieved 2012-07-13.
Gusfield, Dan (1999), Algorithms on Strings, Trees and Sequences: Computer Science and Computational Biology, Cambridge University Press, ISBN 0-521-58519-8.
Hariharan, Ramesh (1994), "Optimal Parallel Suffix Tree Construction", ACM Symposium on Theory of Computing.
Iliopoulos, Costas; Rytter, Wojciech (2004), "On Parallel Transformations of Suffix Arrays into Suffix Trees", 15th Australasian Workshop on Combinatorial Algorithms.
Mansour, Essam; Allam, Amin; Skiadopoulos, Spiros; Kalnis, Panos (2011), "ERA: Efficient Serial and Parallel Suffix Tree Construction for Very Long Strings" (PDF), PVLDB, 5 (1): 49–60, doi:10.14778/2047485.2047490.
McCreight, Edward M. (1976), "A Space-Economical Suffix Tree Construction Algorithm", Journal of the ACM, 23 (2): 262–272, CiteSeerX 10.1.1.130.8022, doi:10.1145/321941.321946.
Phoophakdee, Benjarath; Zaki, Mohammed J. (2007), "Genome-scale disk-based suffix tree indexing", SIGMOD '07: Proceedings of the ACM SIGMOD International Conference on Management of Data, New York, NY, USA: ACM, pp. 833–844.
Sahinalp, Cenk; Vishkin, Uzi (1994), "Symmetry breaking for suffix tree construction", ACM Symposium on Theory of Computing
Smyth, William (2003), Computing Patterns in Strings, Addison-Wesley.
Shun, Julian; Blelloch, Guy E. (2014), "A Simple Parallel Cartesian Tree Algorithm and its Application to Parallel Suffix Tree Construction", ACM Transactions on Parallel Computing.
Tata, Sandeep; Hankins, Richard A.; Patel, Jignesh M. (2003), "Practical Suffix Tree Construction", VLDB '03: Proceedings of the 30th International Conference on Very Large Data Bases, Morgan Kaufmann, pp. 36–47.
Ukkonen, E. (1995), "On-line construction of suffix trees" (PDF), Algorithmica, 14 (3): 249–260, doi:10.1007/BF01206331.
Weiner, P. (1973), "Linear pattern matching algorithms" (PDF), 14th Annual IEEE Symposium on Switching and Automata Theory, pp. 1–11, doi:10.1109/SWAT.1973.13.
Zamir, Oren; Etzioni, Oren (1998), "Web document clustering: a feasibility demonstration", SIGIR '98: Proceedings of the 21st annual international ACM SIGIR conference on Research and development in information retrieval, New York, NY, USA: ACM, pp. 46–54.


== External links ==
Suffix Trees by Sartaj Sahni
NIST's Dictionary of Algorithms and Data Structures: Suffix Tree
Universal Data Compression Based on the Burrows-Wheeler Transformation: Theory and Practice, application of suffix trees in the BWT
Theory and Practice of Succinct Data Structures, C++ implementation of a compressed suffix tree
Ukkonen's Suffix Tree Implementation in C Part 1 Part 2 Part 3 Part 4 Part 5 Part 6