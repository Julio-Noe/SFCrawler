In computer programming, string interpolation (or variable interpolation, variable substitution, or variable expansion) is the process of evaluating a string literal containing one or more placeholders, yielding a result in which the placeholders are replaced with their corresponding values. It is a form of simple template processing or, in formal terms, a form of quasi-quotation (or logic substitution interpretation). String interpolation allows easier and more intuitive string formatting and content-specification compared with string concatenation.String interpolation is common in many programming languages which make heavy use of string representations of data, such as Apache Groovy, Kotlin, Perl, PHP, Python, Ruby, Scala, Swift, Tcl and most Unix shells.  Two modes of literal expression are usually offered: one with interpolation enabled, the other without (termed raw string). Placeholders are usually represented by a bare or a named sigil (typically $ or %), e.g. $placeholder or %123. Expansion of the string usually occurs at run time.


== Variations ==
Some languages do not offer string interpolation, instead offering a standard function where one parameter is the  printf format string, and other(s)  provide the values for each placeholder.
Ruby uses the # symbol for interpolation, and allows interpolating any expression, not only variables.  Other languages may support more advanced interpolation with a special formatting function, such as printf, in which the first argument, the format, specifies the pattern in which the remaining arguments are substituted.


== Algorithms ==
There are two main types of expand variable algorithms for variable interpolation:
Replace and expand placeholders: creating a new string from the original one, by find-replace operations. Find variable-reference (placeholder), replace it by its variable-value. This algorithm offers no cache strategy.
Split and join string: splitting the string into an array, and merging it with the corresponding array of values; then join items by concatenation. The split string can be cached to reuse.


== Security issues ==
String interpolation, like string concatenation, may lead to security problems. If user input data is improperly escaped or filtered, the system will be exposed to SQL injection, script injection, XML External Entity Injection (XXE), and cross-site scripting (XSS) attacks.An SQL injection example:

query = "SELECT x, y, z FROM Table WHERE id='$id' "

If $id is replaced with "'; DELETE FROM Table; SELECT * FROM Table WHERE id='", executing this query will wipe out all the data in Table.


== Examples ==
The following Perl code  works identically in PHP:

produces the output: Alice said Hello World to the crowd of people.


=== Bash ===

The output will be:


=== Boo ===

The output will be:


=== C# ===

The output will be:


=== ColdFusion Markup Language ===

ColdFusion Markup Language (CFML) script syntax:

Tag syntax:

The output will be:

I have 4 apples


=== CoffeeScript ===

The output will be:


=== Dart ===

The output will be:


=== Groovy ===

In groovy, interpolated strings are known as GStrings:

The output will be:


=== Haxe ===

The output will be:


=== Java ===

In Java versions 5 and above, the static method String.format can be used for interpolation:

In Java version 1.1 and above, the MessageFormat class can format sets of objects using placeholders:


=== JavaScript ===

JavaScript, as of the ECMAScript 2015 (ES6) standard, supports string interpolation using backticks ``. This feature is called template literals. Here is an example:

The output will be:


=== Kotlin ===

The output will be:


=== Nemerle ===

It also supports advanced formatting features, such as:

The output will be:


=== Next Generation Shell ===

The recommended syntax is ${expr} though $var is also supported:

The output will be:


=== ParaSail ===

The output will be:


=== Perl ===

The output will be:


=== PHP ===

The output will be:


=== Python ===

The output will be:


=== Ruby / Crystal ===

The output will be:


=== Rust ===

Rust provides string interpolation via the std::fmt module, which is interfaced with through various macros such as format!, write!, and print!. These macros are converted into Rust source code at compile-time, whereby each argument interacts with a formatter. The formatter supports positional parameters, named parameters, argument types, and defining various formatting traits.The output will be:
There are 4 apples and 3 bananas.


=== Scala ===

Scala 2.10+ has implemented the following string interpolators: s, f and raw. It is also possible to write custom ones or override the standard ones.
The f interpolator is a compiler macro that rewrites a format string with embedded expressions as an invocation of String.format. It verifies that the format string is well-formed and well-typed.


==== The standard interpolators ====
Scala 2.10+'s string interpolation allows embedding variable references directly in processed string literals. Here is an example:

The output will be:


=== Sciter (tiscript) ===

In Sciter any function with name starting from $ is considered as interpolating function and so interpolation is customizable and context sensitive:

Where  gets compiled to this:


=== Swift ===

In Swift, a new String value can be created from a mix of constants, variables, literals, and expressions by including their values inside a string literal. Each item inserted into the string literal is wrapped in a pair of parentheses, prefixed by a backslash.

The output will be:


=== Tool Command Language ===

The Tool Command Language has always supported string interpolation in all quote-delimited strings.

The output will be:

In order to actually format - and not simply replace - the values, there is a formatting function.


=== TypeScript ===

As of version 1.4, TypeScript supports string interpolation using backticks ``. Here is an example:

The output will be:

The console.log function can be used as a printf function. The above example can be rewritten, thusly:

The output remains the same.


=== Visual Basic ===
As of Visual Basic 14, String Interpolation is supported in Visual Basic.

will print "Hello, Tom".


== See also ==
Concatenation
Improper input validation
printf format string
Quasi-quotation
String literal
Substitution


== Notes ==